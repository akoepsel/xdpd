The GNU/Linux DPDK driver
================================

Brief
-----

Platform driver backend using Intel's DPDK

Requirements
------------

DPDK v1.7

Compilation
-----------

To compile xDPd you have to define RTE_SDK pointing to the _final_ DPDK build folder before configure. As an example:

	export RTE_SDK=/<PATH TO DPDK>/dpdk/x86_64-native-linuxapp-gcc/

Then to configure xDPd with the DPDK support, make sure it is configured like this:

	CFLAGS="-L$RTE_SDK/lib/ -I$RTE_SDK/include/" CXXFLAGS="$CFLAGS" ../configure --with-hw-support=gnu-linux-dpdk --disable-silent-rules

Note also that _before_ compiling, the file src/config.h should be revised to make sure that at least:

- IO_IFACE_NUM_QUEUES, RX_XXTHRESH and TX_XXTHRESH are correct according to your NIC's capabilities
- Core mask is at least 0x1 + 1 core, e.g. 0x3 (so 2 cores)

To execute xdpd use the normal configuration file (e.g. example.cfg). Note that DPDK's driver will discover 1G ports as geXX and 10G as 10geXX.

Extra parameters, such as the coremask and the number of buffers can be specified using --extra-params. See FAQ.

Limitations
-----------

Note that current config.h cannot handle multiple configurations of ports and RX/TX thresholds. This will be fixed in following version

FAQ
---

* Can I override the coremask or the pool size without recompiling? Yes, use the --extra-params option of xdpd like this:

        ./xdpd -c example.cfg -e "coremask=0x7;pool_size=65536"

* Why are some interfaces not recognised by xDPd? By default only tested devices are compiled by DPDK's PMDs; make sure all the device IDs are enabled when compiling DPDK. e.g. (E1000_DEV_ID_82583V): 

        diff --git a/lib/librte_eal/common/include/rte_pci_dev_ids.h b/lib/librte_eal/common/include/rte_pci_dev_ids.h
        index a51c1ef..9cdc797 100644
        --- a/lib/librte_eal/common/include/rte_pci_dev_ids.h
        +++ b/lib/librte_eal/common/include/rte_pci_dev_ids.h
        @@ -272,7 +272,7 @@ RTE_PCI_DEV_ID_DECL_EM(PCI_VENDOR_ID_INTEL, E1000_DEV_ID_82572EI)
         RTE_PCI_DEV_ID_DECL_EM(PCI_VENDOR_ID_INTEL, E1000_DEV_ID_82573L)
         RTE_PCI_DEV_ID_DECL_EM(PCI_VENDOR_ID_INTEL, E1000_DEV_ID_82574L)
         RTE_PCI_DEV_ID_DECL_EM(PCI_VENDOR_ID_INTEL, E1000_DEV_ID_82574LA)
        -
        +RTE_PCI_DEV_ID_DECL_EM(PCI_VENDOR_ID_INTEL, E1000_DEV_ID_82583V)
         /******************** Physical IGB devices from e1000_hw.h ********************/
         
         #define E1000_DEV_ID_82576                      0x10C9


* Which interface names are used in gnu-linux-dpdk? geXX and 10geXX. The discovered interfaces are listed on bootstrapping time.

* Why do I get the error 'PANIC in hal_driver_init(): Cannot init direct mbuf pool'? This is very likely due to insufficient hugepages memory. Try to increase the amount of hugepages memory. Alternatively you can reduce the amount of buffers allocated, by reducing `NB_MBUF` in `src/xdpd/drivers/gnu_linux_dpdk/src/config.h`.

