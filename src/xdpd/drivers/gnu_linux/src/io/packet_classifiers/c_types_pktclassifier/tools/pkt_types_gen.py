from collections import OrderedDict

#
# Protocols
#
#protocols = OrderedDict = 
protocols = OrderedDict(
	(
	("ETH", 14), 
	("MPLS", 4), 
	("VLAN", 4), 
	("PPPOE", 20), 
	("PPP", 20), 
	("ARPV4", 28), 
	("ICMPV4", 4), 
	("IPV4", 20), 
	("ICMPV6", 4), 
	("ICMPV6_OPTS", 20), 
	("ICMPV6_OPTS_LLADR_SRC", 20), 
	("ICMPV6_OPTS_LLADR_TGT", 20), 
	("ICMPV6_OPTS_PREFIX_INFO", 20), 
	("IPV6", 40), 
	("TCP", 32), 
	("UDP", 8), 
	("SCTP", 12),
	("GTPU", 20)
	)
)

#
# Packet types (using a notation similar to scapy)
#
pkt_types = [ 
	"ETH",
	
	"ETH/ARPV4",
	"ETH/ICMPV4",
	"ETH/ICMPV6",
	
	"ETH/IPV4",
	
	"ETH/IPV4/TCP",
	"ETH/IPV4/UDP",
	"ETH/IPV4/SCTP",
	
	"ETH/IPV6",
]

##
## Functions
##

def license(f):
	f.write("/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n")

def init_guard(f):
	f.write("#ifndef PKT_TYPES_H\n#define PKT_TYPES_H\n\n")
def end_guard(f):
	f.write("#endif //PKT_TYPES_H\n")

def comments(f):
	f.write("//This file has been autogenerated. DO NOT modify it\n\n")	
def protocols_enum(f):
	f.write("typedef enum protocol_types{\n")
	for proto in protocols:
		f.write("\tPT_PROTO_"+proto+",\n")
		
	f.write("\tPT_PROTO_MAX__\n}protocol_types_t;\n\n")

def packet_types_enum(f):
	
	f.write("typedef enum pkt_types{\n")
	for type_ in pkt_types:
		f.write("\tPT_"+type_.replace("/","_")+",\n")
		
	f.write("\tPT_MAX__\n}pkt_types_t;\n\n")

def packet_offsets(f):
	
	f.write("const int protocol_offsets_bt[PT_MAX__][PT_PROTO_MAX__] = {")

	first_type = True 
	for type_ in pkt_types:
		
		if not first_type:
			f.write(",")
		first_type = False

		len=0
		row=[]
		for proto in protocols:
			row.append(-1)
	
		for proto in type_.split("/"):
			row[ protocols.keys().index(proto)] = len
			len += protocols[proto]  	

		f.write("\n\t{")

		first_proto = True
		for proto_len in row: 
			if not first_proto:
				f.write(",")
			first_proto = False
			f.write(str(proto_len))

		f.write("}")
		
	f.write("\n};\n\n")
	
def get_hdr_macro(f):
	f.write("\n#define PKT_TYPES_GET_HDR(tmp, state, proto)\\\n\tdo{\\\n\t\ttmp = state->base + protocol_offsets_bt[ state->type ][ proto ];\\\n\t\tif(tmp <= state->base )\\\n\t\t\ttmp = NULL;\\\n\t}while(0)\n\n")

##
## Main function
##

def main():

	#Open file
	with open('../autogen_pkt_types.h', 'w') as f:	
		
		#License
		license(f)

		#Init guard
		init_guard(f)
		
		#Header comment
		comments(f)
	
		#Generate protocol enum
		protocols_enum(f)

		#Generate pkt types enum
		packet_types_enum(f)
	
		#Offsets in bytes
		packet_offsets(f)

		#Macros
		get_hdr_macro(f)
	
		#End of guards
		end_guard(f)

if __name__ == "__main__":
	main()
